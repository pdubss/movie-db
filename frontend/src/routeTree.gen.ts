/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MoviesIndexRouteImport } from './routes/movies/index'
import { Route as MoviesMovieIdIndexRouteImport } from './routes/movies/$movieId/index'
import { Route as MoviesMovieIdVideosRouteImport } from './routes/movies/$movieId/videos'
import { Route as MoviesMovieIdPhotosRouteImport } from './routes/movies/$movieId/photos'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesIndexRoute = MoviesIndexRouteImport.update({
  id: '/movies/',
  path: '/movies/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesMovieIdIndexRoute = MoviesMovieIdIndexRouteImport.update({
  id: '/movies/$movieId/',
  path: '/movies/$movieId/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesMovieIdVideosRoute = MoviesMovieIdVideosRouteImport.update({
  id: '/movies/$movieId/videos',
  path: '/movies/$movieId/videos',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesMovieIdPhotosRoute = MoviesMovieIdPhotosRouteImport.update({
  id: '/movies/$movieId/photos',
  path: '/movies/$movieId/photos',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/movies': typeof MoviesIndexRoute
  '/movies/$movieId/photos': typeof MoviesMovieIdPhotosRoute
  '/movies/$movieId/videos': typeof MoviesMovieIdVideosRoute
  '/movies/$movieId': typeof MoviesMovieIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/movies': typeof MoviesIndexRoute
  '/movies/$movieId/photos': typeof MoviesMovieIdPhotosRoute
  '/movies/$movieId/videos': typeof MoviesMovieIdVideosRoute
  '/movies/$movieId': typeof MoviesMovieIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/movies/': typeof MoviesIndexRoute
  '/movies/$movieId/photos': typeof MoviesMovieIdPhotosRoute
  '/movies/$movieId/videos': typeof MoviesMovieIdVideosRoute
  '/movies/$movieId/': typeof MoviesMovieIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/movies'
    | '/movies/$movieId/photos'
    | '/movies/$movieId/videos'
    | '/movies/$movieId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/movies'
    | '/movies/$movieId/photos'
    | '/movies/$movieId/videos'
    | '/movies/$movieId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/movies/'
    | '/movies/$movieId/photos'
    | '/movies/$movieId/videos'
    | '/movies/$movieId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  MoviesIndexRoute: typeof MoviesIndexRoute
  MoviesMovieIdPhotosRoute: typeof MoviesMovieIdPhotosRoute
  MoviesMovieIdVideosRoute: typeof MoviesMovieIdVideosRoute
  MoviesMovieIdIndexRoute: typeof MoviesMovieIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/': {
      id: '/movies/'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$movieId/': {
      id: '/movies/$movieId/'
      path: '/movies/$movieId'
      fullPath: '/movies/$movieId'
      preLoaderRoute: typeof MoviesMovieIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$movieId/videos': {
      id: '/movies/$movieId/videos'
      path: '/movies/$movieId/videos'
      fullPath: '/movies/$movieId/videos'
      preLoaderRoute: typeof MoviesMovieIdVideosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$movieId/photos': {
      id: '/movies/$movieId/photos'
      path: '/movies/$movieId/photos'
      fullPath: '/movies/$movieId/photos'
      preLoaderRoute: typeof MoviesMovieIdPhotosRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  MoviesIndexRoute: MoviesIndexRoute,
  MoviesMovieIdPhotosRoute: MoviesMovieIdPhotosRoute,
  MoviesMovieIdVideosRoute: MoviesMovieIdVideosRoute,
  MoviesMovieIdIndexRoute: MoviesMovieIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
