/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WatchlistIndexRouteImport } from './routes/watchlist/index'
import { Route as SignupIndexRouteImport } from './routes/signup/index'
import { Route as ShowsIndexRouteImport } from './routes/shows/index'
import { Route as MoviesIndexRouteImport } from './routes/movies/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as PeoplePersonIdRouteImport } from './routes/people/$personId'
import { Route as UserUseridIndexRouteImport } from './routes/user/$userid/index'
import { Route as ShowsShowIdIndexRouteImport } from './routes/shows/$showId/index'
import { Route as MoviesMovieIdIndexRouteImport } from './routes/movies/$movieId/index'
import { Route as UserUseridGenresRouteImport } from './routes/user/$userid/genres'
import { Route as ShowsGenreGenreIdRouteImport } from './routes/shows/genre/$genreId'
import { Route as ShowsShowIdVideosRouteImport } from './routes/shows/$showId/videos'
import { Route as ShowsShowIdPhotosRouteImport } from './routes/shows/$showId/photos'
import { Route as MoviesGenreGenreIdRouteImport } from './routes/movies/genre/$genreId'
import { Route as MoviesMovieIdVideosRouteImport } from './routes/movies/$movieId/videos'
import { Route as MoviesMovieIdPhotosRouteImport } from './routes/movies/$movieId/photos'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WatchlistIndexRoute = WatchlistIndexRouteImport.update({
  id: '/watchlist/',
  path: '/watchlist/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupIndexRoute = SignupIndexRouteImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShowsIndexRoute = ShowsIndexRouteImport.update({
  id: '/shows/',
  path: '/shows/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesIndexRoute = MoviesIndexRouteImport.update({
  id: '/movies/',
  path: '/movies/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const PeoplePersonIdRoute = PeoplePersonIdRouteImport.update({
  id: '/people/$personId',
  path: '/people/$personId',
  getParentRoute: () => rootRouteImport,
} as any)
const UserUseridIndexRoute = UserUseridIndexRouteImport.update({
  id: '/user/$userid/',
  path: '/user/$userid/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShowsShowIdIndexRoute = ShowsShowIdIndexRouteImport.update({
  id: '/shows/$showId/',
  path: '/shows/$showId/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesMovieIdIndexRoute = MoviesMovieIdIndexRouteImport.update({
  id: '/movies/$movieId/',
  path: '/movies/$movieId/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserUseridGenresRoute = UserUseridGenresRouteImport.update({
  id: '/user/$userid/genres',
  path: '/user/$userid/genres',
  getParentRoute: () => rootRouteImport,
} as any)
const ShowsGenreGenreIdRoute = ShowsGenreGenreIdRouteImport.update({
  id: '/shows/genre/$genreId',
  path: '/shows/genre/$genreId',
  getParentRoute: () => rootRouteImport,
} as any)
const ShowsShowIdVideosRoute = ShowsShowIdVideosRouteImport.update({
  id: '/shows/$showId/videos',
  path: '/shows/$showId/videos',
  getParentRoute: () => rootRouteImport,
} as any)
const ShowsShowIdPhotosRoute = ShowsShowIdPhotosRouteImport.update({
  id: '/shows/$showId/photos',
  path: '/shows/$showId/photos',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesGenreGenreIdRoute = MoviesGenreGenreIdRouteImport.update({
  id: '/movies/genre/$genreId',
  path: '/movies/genre/$genreId',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesMovieIdVideosRoute = MoviesMovieIdVideosRouteImport.update({
  id: '/movies/$movieId/videos',
  path: '/movies/$movieId/videos',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesMovieIdPhotosRoute = MoviesMovieIdPhotosRouteImport.update({
  id: '/movies/$movieId/photos',
  path: '/movies/$movieId/photos',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/login': typeof LoginIndexRoute
  '/movies': typeof MoviesIndexRoute
  '/shows': typeof ShowsIndexRoute
  '/signup': typeof SignupIndexRoute
  '/watchlist': typeof WatchlistIndexRoute
  '/movies/$movieId/photos': typeof MoviesMovieIdPhotosRoute
  '/movies/$movieId/videos': typeof MoviesMovieIdVideosRoute
  '/movies/genre/$genreId': typeof MoviesGenreGenreIdRoute
  '/shows/$showId/photos': typeof ShowsShowIdPhotosRoute
  '/shows/$showId/videos': typeof ShowsShowIdVideosRoute
  '/shows/genre/$genreId': typeof ShowsGenreGenreIdRoute
  '/user/$userid/genres': typeof UserUseridGenresRoute
  '/movies/$movieId': typeof MoviesMovieIdIndexRoute
  '/shows/$showId': typeof ShowsShowIdIndexRoute
  '/user/$userid': typeof UserUseridIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/login': typeof LoginIndexRoute
  '/movies': typeof MoviesIndexRoute
  '/shows': typeof ShowsIndexRoute
  '/signup': typeof SignupIndexRoute
  '/watchlist': typeof WatchlistIndexRoute
  '/movies/$movieId/photos': typeof MoviesMovieIdPhotosRoute
  '/movies/$movieId/videos': typeof MoviesMovieIdVideosRoute
  '/movies/genre/$genreId': typeof MoviesGenreGenreIdRoute
  '/shows/$showId/photos': typeof ShowsShowIdPhotosRoute
  '/shows/$showId/videos': typeof ShowsShowIdVideosRoute
  '/shows/genre/$genreId': typeof ShowsGenreGenreIdRoute
  '/user/$userid/genres': typeof UserUseridGenresRoute
  '/movies/$movieId': typeof MoviesMovieIdIndexRoute
  '/shows/$showId': typeof ShowsShowIdIndexRoute
  '/user/$userid': typeof UserUseridIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/login/': typeof LoginIndexRoute
  '/movies/': typeof MoviesIndexRoute
  '/shows/': typeof ShowsIndexRoute
  '/signup/': typeof SignupIndexRoute
  '/watchlist/': typeof WatchlistIndexRoute
  '/movies/$movieId/photos': typeof MoviesMovieIdPhotosRoute
  '/movies/$movieId/videos': typeof MoviesMovieIdVideosRoute
  '/movies/genre/$genreId': typeof MoviesGenreGenreIdRoute
  '/shows/$showId/photos': typeof ShowsShowIdPhotosRoute
  '/shows/$showId/videos': typeof ShowsShowIdVideosRoute
  '/shows/genre/$genreId': typeof ShowsGenreGenreIdRoute
  '/user/$userid/genres': typeof UserUseridGenresRoute
  '/movies/$movieId/': typeof MoviesMovieIdIndexRoute
  '/shows/$showId/': typeof ShowsShowIdIndexRoute
  '/user/$userid/': typeof UserUseridIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/people/$personId'
    | '/login'
    | '/movies'
    | '/shows'
    | '/signup'
    | '/watchlist'
    | '/movies/$movieId/photos'
    | '/movies/$movieId/videos'
    | '/movies/genre/$genreId'
    | '/shows/$showId/photos'
    | '/shows/$showId/videos'
    | '/shows/genre/$genreId'
    | '/user/$userid/genres'
    | '/movies/$movieId'
    | '/shows/$showId'
    | '/user/$userid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/people/$personId'
    | '/login'
    | '/movies'
    | '/shows'
    | '/signup'
    | '/watchlist'
    | '/movies/$movieId/photos'
    | '/movies/$movieId/videos'
    | '/movies/genre/$genreId'
    | '/shows/$showId/photos'
    | '/shows/$showId/videos'
    | '/shows/genre/$genreId'
    | '/user/$userid/genres'
    | '/movies/$movieId'
    | '/shows/$showId'
    | '/user/$userid'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/people/$personId'
    | '/login/'
    | '/movies/'
    | '/shows/'
    | '/signup/'
    | '/watchlist/'
    | '/movies/$movieId/photos'
    | '/movies/$movieId/videos'
    | '/movies/genre/$genreId'
    | '/shows/$showId/photos'
    | '/shows/$showId/videos'
    | '/shows/genre/$genreId'
    | '/user/$userid/genres'
    | '/movies/$movieId/'
    | '/shows/$showId/'
    | '/user/$userid/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  PeoplePersonIdRoute: typeof PeoplePersonIdRoute
  LoginIndexRoute: typeof LoginIndexRoute
  MoviesIndexRoute: typeof MoviesIndexRoute
  ShowsIndexRoute: typeof ShowsIndexRoute
  SignupIndexRoute: typeof SignupIndexRoute
  WatchlistIndexRoute: typeof WatchlistIndexRoute
  MoviesMovieIdPhotosRoute: typeof MoviesMovieIdPhotosRoute
  MoviesMovieIdVideosRoute: typeof MoviesMovieIdVideosRoute
  MoviesGenreGenreIdRoute: typeof MoviesGenreGenreIdRoute
  ShowsShowIdPhotosRoute: typeof ShowsShowIdPhotosRoute
  ShowsShowIdVideosRoute: typeof ShowsShowIdVideosRoute
  ShowsGenreGenreIdRoute: typeof ShowsGenreGenreIdRoute
  UserUseridGenresRoute: typeof UserUseridGenresRoute
  MoviesMovieIdIndexRoute: typeof MoviesMovieIdIndexRoute
  ShowsShowIdIndexRoute: typeof ShowsShowIdIndexRoute
  UserUseridIndexRoute: typeof UserUseridIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/watchlist/': {
      id: '/watchlist/'
      path: '/watchlist'
      fullPath: '/watchlist'
      preLoaderRoute: typeof WatchlistIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup/': {
      id: '/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shows/': {
      id: '/shows/'
      path: '/shows'
      fullPath: '/shows'
      preLoaderRoute: typeof ShowsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/': {
      id: '/movies/'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/people/$personId': {
      id: '/people/$personId'
      path: '/people/$personId'
      fullPath: '/people/$personId'
      preLoaderRoute: typeof PeoplePersonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/$userid/': {
      id: '/user/$userid/'
      path: '/user/$userid'
      fullPath: '/user/$userid'
      preLoaderRoute: typeof UserUseridIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shows/$showId/': {
      id: '/shows/$showId/'
      path: '/shows/$showId'
      fullPath: '/shows/$showId'
      preLoaderRoute: typeof ShowsShowIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$movieId/': {
      id: '/movies/$movieId/'
      path: '/movies/$movieId'
      fullPath: '/movies/$movieId'
      preLoaderRoute: typeof MoviesMovieIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/$userid/genres': {
      id: '/user/$userid/genres'
      path: '/user/$userid/genres'
      fullPath: '/user/$userid/genres'
      preLoaderRoute: typeof UserUseridGenresRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shows/genre/$genreId': {
      id: '/shows/genre/$genreId'
      path: '/shows/genre/$genreId'
      fullPath: '/shows/genre/$genreId'
      preLoaderRoute: typeof ShowsGenreGenreIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shows/$showId/videos': {
      id: '/shows/$showId/videos'
      path: '/shows/$showId/videos'
      fullPath: '/shows/$showId/videos'
      preLoaderRoute: typeof ShowsShowIdVideosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shows/$showId/photos': {
      id: '/shows/$showId/photos'
      path: '/shows/$showId/photos'
      fullPath: '/shows/$showId/photos'
      preLoaderRoute: typeof ShowsShowIdPhotosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/genre/$genreId': {
      id: '/movies/genre/$genreId'
      path: '/movies/genre/$genreId'
      fullPath: '/movies/genre/$genreId'
      preLoaderRoute: typeof MoviesGenreGenreIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$movieId/videos': {
      id: '/movies/$movieId/videos'
      path: '/movies/$movieId/videos'
      fullPath: '/movies/$movieId/videos'
      preLoaderRoute: typeof MoviesMovieIdVideosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$movieId/photos': {
      id: '/movies/$movieId/photos'
      path: '/movies/$movieId/photos'
      fullPath: '/movies/$movieId/photos'
      preLoaderRoute: typeof MoviesMovieIdPhotosRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  PeoplePersonIdRoute: PeoplePersonIdRoute,
  LoginIndexRoute: LoginIndexRoute,
  MoviesIndexRoute: MoviesIndexRoute,
  ShowsIndexRoute: ShowsIndexRoute,
  SignupIndexRoute: SignupIndexRoute,
  WatchlistIndexRoute: WatchlistIndexRoute,
  MoviesMovieIdPhotosRoute: MoviesMovieIdPhotosRoute,
  MoviesMovieIdVideosRoute: MoviesMovieIdVideosRoute,
  MoviesGenreGenreIdRoute: MoviesGenreGenreIdRoute,
  ShowsShowIdPhotosRoute: ShowsShowIdPhotosRoute,
  ShowsShowIdVideosRoute: ShowsShowIdVideosRoute,
  ShowsGenreGenreIdRoute: ShowsGenreGenreIdRoute,
  UserUseridGenresRoute: UserUseridGenresRoute,
  MoviesMovieIdIndexRoute: MoviesMovieIdIndexRoute,
  ShowsShowIdIndexRoute: ShowsShowIdIndexRoute,
  UserUseridIndexRoute: UserUseridIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
